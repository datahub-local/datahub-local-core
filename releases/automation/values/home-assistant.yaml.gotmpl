#
# IMPORTANT NOTE
#
# This chart inherits from our common library chart. You can check the default values/options here:
# https://github.com/bjw-s/helm-charts/blob/main/charts/library/common/values.yaml

defaultPodOptions:
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    fsGroupChangePolicy: OnRootMismatch
    seccompProfile:
      type: RuntimeDefault

configMaps:
  static-config:
    enabled: true
    data:
      auth_providers_init.yaml: |
        - type: homeassistant
      auth_providers_final.yaml: |
        - type: homeassistant
        - type: trusted_networks
          trusted_networks:
          - 10.42.0.0/16
          - 10.52.0.0/16
          - 192.168.31.0/24
          trusted_users:
            10.42.0.0/16: admin
            10.52.0.0/16: admin
            192.168.31.0/24: admin
          allow_bypass_login: true
      configuration.yaml: |
        http:
          use_x_forwarded_for: true
          trusted_proxies:
            - 10.42.0.0/16
            - 10.52.0.0/16
            - 192.168.31.0/24
        homeassistant:
          name: Datahub.local
          
          unit_system: metric
          currency: EUR
          country: ES

          auth_providers: !include auth_providers.yaml
          
          debug: false
      pre_start.sh: |
        #!/bin/bash

        echo "Init pre_start"

        exec >> /config/logs/pre_start.log 2>&1

        if [ ! -f /config/.storage/.intialized ]; then
          cp -f /config/auth_providers_init.yaml /config/auth_providers.yaml
        fi

        echo "Finish pre_start"

        exit 0
      post_start.sh: |
        #!/bin/bash

        echo "Init post_start"

        exec >> /config/logs/post_start.log 2>&1

        if [ ! -f /config/.storage/.intialized ]; then
          HA_URL="http://127.0.0.1:8123"
          CLIENT_ID="$HA_URL"

          REQUEST='{
            "client_id": "'$CLIENT_ID'",
            "name": "'$ADMIN_USER'",
            "username": "'$ADMIN_USER'",
            "password": "'$ADMIN_PASSWORD'",
            "language": "en-GB"
          }'

          sleep 10

          echo "Creating user"

          RESPONSE=$(curl -Ss "$HA_URL/api/onboarding/users" \
            --header "Content-Type: application/json" \
            -X POST \
            --data "$REQUEST")
          
          AUTH_CODE=$(echo "$RESPONSE" | jq -r '.auth_code')

          sleep 1

          echo "Getting token"

          RESPONSE=$(curl -Ss "$HA_URL/auth/token" -X POST \
            -d "client_id=$CLIENT_ID&code=$AUTH_CODE&grant_type=authorization_code")
          
          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')

          sleep 1

          echo "Executing onboarding/core_config"

          curl -Ss "$HA_URL/api/onboarding/core_config" -X POST \
            --header "Authorization: Bearer $ACCESS_TOKEN"

          sleep 1

          echo "Executing onboarding/analytics"

          curl -Ss "$HA_URL/api/onboarding/analytics" -X POST \
            --header "Authorization: Bearer $ACCESS_TOKEN"

          sleep 1

          REQUEST='{
            "client_id": "'$CLIENT_ID'",
            "redirect_uri": "'$CLIENT_ID'"
          }'

          echo "Executing onboarding/integration"

          curl -Ss "$HA_URL/api/onboarding/integration" \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            -X POST \
            --data "$REQUEST"

          sleep 1

          ADMIN_ID=$(cat /config/.storage/auth | jq -r '.data.users[] | select(.name == "'$ADMIN_USER'") | .id')
          
          cat /config/auth_providers_final.yaml | sed 's/admin/'$ADMIN_ID'/g' > /config/auth_providers.yaml

          echo "Created /config/auth_providers.yaml" && cat /config/auth_providers.yaml

          echo "DONE" > /config/.storage/.intialized

          echo "Rebooting"

          curl -Ss "$HA_URL/api/services/homeassistant/restart" -X POST \
            --header "Authorization: Bearer $ACCESS_TOKEN"
        fi

        echo "Finish post_start"

        exit 0

controllers:
  main:
    replicas: 1
    strategy: RollingUpdate
    type: statefulset
    initContainers:
      init:
        image:
          repository: ghcr.io/onedr0p/home-assistant
          tag: '{{ range $key,$value := .StateValues.container_image_version }}{{ if (eq $key "ghcr.io/onedr0p/home-assistant") }}{{ $value }}{{ end }}{{ end }}'
        command: ["/bin/sh", "/config/pre_start.sh"]
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
    containers:
      main:
        image:
          repository: ghcr.io/onedr0p/home-assistant
          tag: '{{ range $key,$value := .StateValues.container_image_version }}{{ if (eq $key "ghcr.io/onedr0p/home-assistant") }}{{ $value }}{{ end }}{{ end }}'
        env:
          TZ: Europe/Madrid
          ADMIN_USER:
            secretKeyRef:
              name: home-assistant-auth
              key: user
          ADMIN_PASSWORD:
            secretKeyRef:
              name: home-assistant-auth
              key: password
        resources:
          requests:
            memory: 300Mi
            cpu: 300m
        probes:
          liveness:
            enabled: true
            spec:
              exec:
                command:
                  - /usr/bin/env
                  - bash
                  - -c
                  - curl --fail localhost:8123/manifest.json
              failureThreshold: 5
              initialDelaySeconds: 60
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 10
          readiness:
            enabled: true
          startup:
            enabled: true
            spec:
              failureThreshold: 30
              periodSeconds: 5
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "/config/post_start.sh"]

serviceAccount:
  create: true

persistence:
  static-config:
    type: configMap
    identifier: static-config
    globalMounts:
      - path: /config/auth_providers_init.yaml
        subPath: auth_providers_init.yaml
      - path: /config/auth_providers_final.yaml
        subPath: auth_providers_final.yaml
      - path: /config/configuration.yaml
        subPath: configuration.yaml
      - path: /config/pre_start.sh
        subPath: pre_start.sh
      - path: /config/post_start.sh
        subPath: post_start.sh

  config:
    type: persistentVolumeClaim
    accessMode: ReadWriteOnce
    storageClass: longhorn
    size: 1Gi
    globalMounts:
      - path: /config
  logs:
    type: emptyDir
    globalMounts:
      - path: /config/logs
  tts:
    type: emptyDir
    globalMounts:
      - path: /config/tts
  tmp:
    type: emptyDir

service:
  main:
    controller: main
    ports:
      http:
        port: 8123

ingress:
  main:
    enabled: true

    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.middlewares: "{{ if .Values.security_enabled }}security-security-oauth2@kubernetescrd{{ end }}"

      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Home Assistant"
      gethomepage.dev/description: "Open source home automation that puts local control and privacy first."
      gethomepage.dev/group: "Automation"
      gethomepage.dev/icon: "si-homeassistant"

    className: "traefik"

    hosts:
      - host: "automation-home-assistant.{{ .StateValues.ingress_hostname }}"
        paths:
          - path: /
            pathType: Prefix
            service:
              name: "{{ .Values.release_name }}-automation-home-assistant"
              port: 8123

serviceMonitor:
  main:
    enabled: true

    serviceName: main

    endpoints:
      - port: http
        scheme: http
        path: /api/prometheus
        interval: 1m
        scrapeTimeout: 10s
