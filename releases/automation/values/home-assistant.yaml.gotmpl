#
# IMPORTANT NOTE
#
# This chart inherits from our common library chart. You can check the default values/options here:
# https://github.com/bjw-s/helm-charts/blob/main/charts/library/common/values.yaml

defaultPodOptions:
  hostNetwork: true # Fix https://github.com/k3s-io/k3s/discussions/2997

  securityContext:
    runAsUser: 0

configMaps:
  scripts:
    enabled: true
    data:
#{{- range $path := readDir "../templates/files/scripts/" }}
#{{- $scriptName := regexReplaceAll "(^.*/)(.*)$" $path "${2}" }}
      {{ $scriptName }}: | {{- readFile $path | nindent 10}}
#{{- end }}

controllers:
  main:
    replicas: 1
    strategy: RollingUpdate
    type: statefulset
    annotations:
      reloader.stakater.com/auto: "true"
      backup.velero.io/backup-volumes: config
    pod:
      labels:
        backup.velero.io/custom-backup-daily-snapshot: "true"
    initContainers:
      init:
        image:
          repository: homeassistant/home-assistant
          tag: '{{ range $key,$value := .StateValues.container_image_version }}{{ if (eq $key "homeassistant/home-assistant") }}{{ $value }}{{ end }}{{ end }}'
        command:
          - "/bin/bash"
          - "-i"
          - "/usr/local/ha-scripts/ha-pre-start.sh"
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
    containers:
      main:
        image:
          repository: homeassistant/home-assistant
          tag: '{{ range $key,$value := .StateValues.container_image_version }}{{ if (eq $key "homeassistant/home-assistant") }}{{ $value }}{{ end }}{{ end }}'
        env:
          TZ: "Europe/Madrid"
          ADMIN_USER:
            secretKeyRef:
              name: home-assistant-auth
              key: user
          ADMIN_PASSWORD:
            secretKeyRef:
              name: home-assistant-auth
              key: password
          CAMERA_PASSWORD:
            secretKeyRef:
              name: home-assistant-auth
              key: camera_password
        resources:
          requests:
            memory: 300Mi
            cpu: 300m
        probes:
          liveness:
            enabled: true
            spec:
              exec:
                command:
                  - /usr/bin/env
                  - bash
                  - -c
                  - curl --fail localhost:8123/manifest.json
              failureThreshold: 5
              initialDelaySeconds: 60
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 10
          readiness:
            enabled: true
          startup:
            enabled: true
            spec:
              failureThreshold: 30
              periodSeconds: 5
        lifecycle:
          postStart:
            exec:
              command:
                - "/bin/bash"
                - "-i"
                - "/usr/local/ha-scripts/ha-post-start.sh"
      code-server:
        image:
          repository: ghcr.io/coder/code-server
          tag: '{{ range $key,$value := .StateValues.container_image_version }}{{ if (eq $key "ghcr.io/coder/code-server") }}{{ $value }}{{ end }}{{ end }}'
        args:
          - --auth
          - none
          - --user-data-dir
          - "/config/.vscode"
          - --extensions-dir
          - "/config/.vscode"
          - --port
          - "8080"
          - "/config"
        env:
          TZ: Europe/Madrid

serviceAccount:
  create: true

persistence:
  scripts:
    type: configMap
    identifier: scripts
    globalMounts:
      - path: /usr/local/ha-scripts
  ssh-key:
    type: secret
    name: home-assistant-auth
    globalMounts:
      - path: /etc/ssh_gh_deploy_key
        subPath: gh_deploy_key
        readOnly: true

  config:
    type: persistentVolumeClaim
    accessMode: ReadWriteOnce
    storageClass: longhorn
    size: 1Gi
    globalMounts:
      - path: /config
  tmp:
    type: emptyDir
  root:
    type: emptyDir

service:
  main:
    controller: main
    ports:
      http:
        port: 8123
      code-server:
        port: 8080

ingress:
  main:
    enabled: true

    annotations:
      #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | replace "SOME_REGEX_TO_SKIP" "(?!auth(?!\\/token)).*" | nindent 6 }}{{ end }}

      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Home Assistant"
      gethomepage.dev/pod-selector: "app.kubernetes.io/instance={{ .Values.release_name }}-automation-home-assistant"
      gethomepage.dev/description: "Open source home automation that puts local control and privacy first."
      gethomepage.dev/group: "Automation"
      gethomepage.dev/icon: "sh-homeassistant"

    className: "nginx"

    hosts:
      - host: "automation-home-assistant.{{ .StateValues.ingress_hostname }}"
        paths:
          - path: /
            pathType: Prefix
            service:
              name: "{{ .Values.release_name }}-automation-home-assistant"
              port: 8123
  main-code:
    enabled: true

    annotations:
      #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | nindent 6 }}{{ end }}

      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Home Assistant (Code)"
      gethomepage.dev/pod-selector: "app.kubernetes.io/instance={{ .Values.release_name }}-automation-home-assistant"
      gethomepage.dev/description: "Instance of Visual Studio Code for Home Assistant"
      gethomepage.dev/group: "Automation"
      gethomepage.dev/icon: "sh-codeium"

    className: "nginx"

    hosts:
      - host: "automation-home-assistant-code.{{ .StateValues.ingress_hostname }}"
        paths:
          - path: /
            pathType: Prefix
            service:
              name: "{{ .Values.release_name }}-automation-home-assistant"
              port: 8080

serviceMonitor:
  main:
    enabled: true

    serviceName: main

    endpoints:
      - port: http
        scheme: http
        path: /api/prometheus
        interval: 1m
        scrapeTimeout: 10s
