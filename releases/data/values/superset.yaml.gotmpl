postgresql:
  enabled: false

redis:
  enabled: false

supersetNode:
  connections:
    redis_password: true

configOverrides:
  auth: |
    # This will make sure the redirect_uri is properly computed, even with SSL offloading
    ENABLE_PROXY_FIX = True

    import logging
    from flask_appbuilder.security.manager import AUTH_OAUTH
    from superset.security import SupersetSecurityManager

    class CustomSsoSecurityManager(SupersetSecurityManager):
        def oauth_user_info(self, provider, response=None):
            if provider == 'dex':
                user_info = response['userinfo']

                return { 'name' : user_info['name'], 'email' : user_info['email'], 'id' : user_info['preferred_username'], 'username' : user_info['preferred_username'], 'first_name':'', 'last_name':''}

    CUSTOM_SECURITY_MANAGER = CustomSsoSecurityManager

    AUTH_TYPE = AUTH_OAUTH
    OAUTH_PROVIDERS = [
        {
            "name": "dex",
            "whitelist": [ os.getenv("OAUTH_WHITELIST_REGEX", "") ],
            "icon": "fa-address-card",
            "token_key": "access_token",
            "remote_app": {
                "client_id": os.environ.get("OAUTH_CLIENT_ID"),
                "client_secret": os.environ.get("OAUTH_CLIENT_SECRET"),
                "server_metadata_url": "https://security-dex.{{ .StateValues.ingress_hostname }}/dex/.well-known/openid-configuration",
                "api_base_url": "https://security-dex.{{ .StateValues.ingress_hostname }}/dex/",
                "redirect_uri": "https://security-dex.{{ .StateValues.ingress_hostname }}/oauth-authorized/dex",
                "client_kwargs": {"scope": "openid profile email"},
            }
        }
    ]
    AUTH_ROLE_ADMIN = "Admin"
    AUTH_ROLE_PUBLIC = "Public"
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = "Admin"
  database: |
    import os

    def lookup_password(url):
      if "postgresql" in url:
        return os.environ["DB_PASS"]
      if "redis" in url:
        return os.environ["REDIS_PASSWORD"]

      return None

    SQLALCHEMY_CUSTOM_PASSWORD_STORE = lookup_password

secretEnv:
  create: false

extraSecretEnv:
  SUPERSET_SECRET_KEY: "{{ .StateValues.security_github_client_id }}"
  REDIS_HOST: "{{ .Values.release_name }}-data-valkey-headless"
  REDIS_PORT: "6379"
  REDIS_PROTO: "redis"
  REDIS_DB: "1"
  REDIS_CELERY_DB: "0"
  DB_HOST: "{{ $.Values.release_name }}-data-cloudnative-pg-cluster-rw"
  DB_PORT: "5432"
  DB_USER: "{{ .StateValues.postgres_user }}"
  DB_NAME: "{{ .StateValues.postgres_extra_databases.superset }}"

  OAUTH_CLIENT_ID: "superset"
  OAUTH_CLIENT_SECRET: "{{ .StateValues.security_github_client_secret }}"

extraEnvRaw:
  - name: DB_PASS
    valueFrom:
      secretKeyRef:
        name: postgresql-admin-credentials
        key: password
  - name: REDIS_PASSWORD
    valueFrom:
      secretKeyRef:
        name: valkey-admin-credentials
        key: password

bootstrapScript: |
  #!/bin/bash
  apt update && apt install -y build-essential

  uv pip install Authlib psycopg2 trino

extraConfigs:
  import_datasources.yaml: |
    databases:
    {{- range $key, $value := .Values.postgres_extra_databases }}
    - allow_ctas: true
      allow_cvas: true
      allow_dml: true
      allow_file_upload: true
      allow_run_async : true
      database_name: postgresql-{{ $key }}
      sqlalchemy_uri: postgresql://{{ $.StateValues.postgres_user}}@datahub-local-core-data-cloudnative-pg-cluster-rw:5432/{{ $value }}
      tables: []
    {{- end }}
    - allow_ctas: true
      allow_cvas: true
      allow_dml: true
      allow_file_upload: true
      allow_run_async : true
      database_name: trino-memory
      sqlalchemy_uri: trino://{{ $.StateValues.trino_user}}@{{ $.Values.release_name }}-data-trino-trino:8080/memory
      tables: []
    - allow_ctas: true
      allow_cvas: true
      allow_dml: true
      allow_file_upload: true
      allow_run_async : true
      database_name: trino-iceberg
      sqlalchemy_uri: trino://{{ $.StateValues.trino_user}}@{{ $.Values.release_name }}-data-trino-trino:8080/iceberg
      tables: []

ingress:
  enabled: true
  ingressClassName: "nginx"
  path: /
  pathType: Prefix
  hosts:
    - "data-superset.{{ .StateValues.ingress_hostname }}"
  annotations:
    gethomepage.dev/enabled: "true"
    gethomepage.dev/name: "Superset"
    gethomepage.dev/pod-selector: "app=superset"
    gethomepage.dev/description: "Data Visualization and Data Exploration Platform"
    gethomepage.dev/group: "Data"
    gethomepage.dev/icon: "https://superset.apache.org/img/superset-mark-dark.svg"

    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
