global:
  postgresqlSecretName: "postgresql-admin-credentials"

  celeryConfigSecretName: "valkey-admin-credentials"

generateCeleryConfigSecret: false
generatePostgresqlPasswordSecret: false

dagsterWebserver:
  replicaCount: 1

  image:
    repository: "ghcr.io/datahub-local/dagster-celery-k8s-oci"
    tag: '{{ range $key,$value := .StateValues.container_image_version }}{{ if (eq $key "ghcr.io/datahub-local/dagster-celery-k8s-oci") }}{{ $value }}{{ end }}{{ end }}'

  env:
    - name: "TRINO_HOST"
      value: "{{ $.Values.release_name }}-data-trino-trino:8080"
    - name: "TRINO_PORT"
      value: "8080"
    - name: "TRINO_USER"
      value: "{{ $.StateValues.trino_user}}"
    - name: "S3_AWS_ENDPOINT"
      value: "http://{{ .Values.release_name }}-data-minio:9000"
    - name: "S3_AWS_ACCESS_KEY"
      value: "{{ .StateValues.minio_user }}"
    - name: "S3_AWS_SECRET_KEY"
      valueFrom:
        secretKeyRef:
          name: minio-admin-credentials
          key: accessKey

dagsterDaemon:
  image:
    repository: "ghcr.io/datahub-local/dagster-celery-k8s-oci"
    tag: '{{ range $key,$value := .StateValues.container_image_version }}{{ if (eq $key "ghcr.io/datahub-local/dagster-celery-k8s-oci") }}{{ $value }}{{ end }}{{ end }}'

  env:
    - name: "TRINO_HOST"
      value: "{{ $.Values.release_name }}-data-trino-trino:8080"
    - name: "TRINO_PORT"
      value: "8080"
    - name: "TRINO_USER"
      value: "{{ $.StateValues.trino_user}}"
    - name: "S3_AWS_ENDPOINT"
      value: "http://{{ .Values.release_name }}-data-minio:9000"
    - name: "S3_AWS_ACCESS_KEY"
      value: "{{ .StateValues.minio_user }}"
    - name: "S3_AWS_SECRET_KEY"
      valueFrom:
        secretKeyRef:
          name: minio-admin-credentials
          key: accessKey

dagster-user-deployments:
  env:
    - name: "TRINO_HOST"
      value: "{{ $.Values.release_name }}-data-trino-trino:8080"
    - name: "TRINO_PORT"
      value: "8080"
    - name: "TRINO_USER"
      value: "{{ $.StateValues.trino_user}}"
    - name: "S3_AWS_ENDPOINT"
      value: "http://{{ .Values.release_name }}-data-minio:9000"
    - name: "S3_AWS_ACCESS_KEY"
      value: "{{ .StateValues.minio_user }}"
    - name: "S3_AWS_SECRET_KEY"
      valueFrom:
        secretKeyRef:
          name: minio-admin-credentials
          key: accessKey

  # List of unique deployments
  deployments:
    - name: "dagster-user-code-example"
      image:
        repository: "ghcr.io/datahub-local/dagster-user-code-example"
        tag: "latest"
        pullPolicy: Always
      dagsterApiGrpcArgs:
        - "--python-file"
        - "/opt/dagster/app/example_repo/repo.py"
      port: 3030

runLauncher:
  type: CeleryK8sRunLauncher

  config:
    celeryK8sRunLauncher:
      image:
        repository: "ghcr.io/datahub-local/dagster-celery-k8s-oci"
        tag: '{{ range $key,$value := .StateValues.container_image_version }}{{ if (eq $key "ghcr.io/datahub-local/dagster-celery-k8s-oci") }}{{ $value }}{{ end }}{{ end }}'

postgresql:
  enabled: false

  postgresqlHost: "{{ $.Values.release_name }}-data-postgresql-hl"
  postgresqlUsername: "{{ $.StateValues.postgress_user}}"
  postgresqlDatabase: dagster

redis:
  enabled: true
  internal: false

  host: "{{ .Values.release_name }}-data-valkey-master"
  port: 6379

ingress:
  enabled: true

  apiVersion: "networking.k8s.io/v1/Ingress"

  ingressClassName: "nginx"

  annotations:
    #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | nindent 4 }}{{ end }}

    gethomepage.dev/enabled: "true"
    gethomepage.dev/name: "Dagster"
    gethomepage.dev/pod-selector: "app=minio"
    gethomepage.dev/description: "The data orchestration platform built for productivity."
    gethomepage.dev/group: "Data"
    gethomepage.dev/icon: "si-octopusdeploy"

  dagsterWebserver:
    host: "data-dagster.{{ .StateValues.ingress_hostname }}"

    path: "/"
    pathType: Prefix
