# Values for kube-prometheus-stack chart. See https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml

prometheusOperator:
  admissionWebhooks:
    enabled: false

  tls:
    enabled: false

prometheus:
  ingress:
    enabled: true
    ingressClassName: "nginx"
    hosts:
      - "monitoring-prometheus.{{ .StateValues.ingress_hostname }}"
    paths:
      - /
    secureBackends: true
    annotations:
      #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | nindent 6 }}{{ end }}

      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Prometheus"
      gethomepage.dev/pod-selector: "app.kubernetes.io/name=prometheus"
      gethomepage.dev/description: "Monitoring system and time series database."
      gethomepage.dev/group: "Monitoring"
      gethomepage.dev/icon: "prometheus.png"
  prometheusSpec:
    externalUrl: "https://monitoring-prometheus.{{ .StateValues.ingress_hostname }}:{{ .StateValues.ingress_port }}/"
    routePrefix: /

    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false

    replicas: 1
    retention: 5d

alertmanager:
  alertmanagerSpec:
    replicas: 2

  config: # Defined by Robusta (https://docs.robusta.dev/master/configuration/alertmanager-integration/alert-manager.html)
    receivers:
      - name: "default-receiver"
      - name: "robusta"
        webhook_configs:
          - url: "http://{{ $.Values.release_name }}-robusta-runner/api/alerts"
            send_resolved: true

    route:
      routes:
        - receiver: "robusta"
          group_by: ["..."]
          group_wait: 1s
          group_interval: 1s
          matchers:
            - severity =~ ".*"
          repeat_interval: 4h
          continue: true #
      receiver: "default-receiver"

  ingress:
    enabled: true
    ingressClassName: "nginx"
    hosts:
      - "monitoring-alertmanager.{{ .StateValues.ingress_hostname }}"
    paths:
      - /
    secureBackends: true
    annotations:
      #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | nindent 6 }}{{ end }}

      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Alertmanager"
      gethomepage.dev/pod-selector: "app.kubernetes.io/name=alertmanager"
      gethomepage.dev/description: "Handle alerts sent by client applications such as the Prometheus server."
      gethomepage.dev/group: "Monitoring"
      gethomepage.dev/icon: "alertmanager.png"

defaultRules:
  rules:
    kubeProxy: false

grafana:
  assertNoLeakedSecrets: false
  persistence:
    enabled: true
    size: 2Gi
  grafana.ini:
    server:
      domain: "monitoring-grafana.{{ .StateValues.ingress_hostname }}"
      root_url: "https://monitoring-grafana.{{ .StateValues.ingress_hostname }}:{{ .StateValues.ingress_port }}"
      serve_from_sub_path: true
    auth:
      disable_login_form: true
      disable_signout_menu: true
    auth.basic:
      enabled: true
    #{{- if .Values.security_enabled }}
    auth.generic_oauth:
      enabled: true
      allow_sign_up: true
      auto_login: true

      client_id: "grafana"
      client_secret: "{{ .StateValues.security_github_client_secret }}"
      scopes: "openid email profile groups offline_access"
      auth_url: "https://security-dex.{{ .StateValues.ingress_hostname }}/dex/auth"
      token_url: "https://security-dex.{{ .StateValues.ingress_hostname }}/dex/token"
      api_url: "https://security-dex.{{ .StateValues.ingress_hostname }}/dex/userinfo"
    users:
      auto_assign_org_role: Admin
    #{{- else }}
    auth.anonymous:
      enabled: true
      org_role: Admin
    #{{- end }}
  admin:
    existingSecret: "grafana-admin-credentials"
    userKey: user
    passwordKey: password
  ingress:
    enabled: true
    ingressClassName: "nginx"
    hosts:
      - "monitoring-grafana.{{ .StateValues.ingress_hostname }}"
    path: /
    secureBackends: true
    annotations:
      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Grafana"
      gethomepage.dev/pod-selector: "app.kubernetes.io/name=grafana"
      gethomepage.dev/description: "The open and composable observability and data visualization platform."
      gethomepage.dev/group: "Monitoring"
      gethomepage.dev/icon: "grafana.png"

prometheus-node-exporter:
  extraArgs:
    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
    - --collector.textfile.directory=/var/lib/node_exporter

  securityContext:
    fsGroup: 0
    runAsGroup: 0
    runAsNonRoot: false
    runAsUser: 0

  sidecars:
    - name: node-exporter-textfiles-smartmon
      image: ghcr.io/datahub-local/node-exporter-textfiles:{{ range $key,$value := .StateValues.container_image_version }}{{ if (eq $key "ghcr.io/datahub-local/node-exporter-textfiles") }}{{ $value }}{{ end }}{{ end }}
      env:
        - name: SCRIPT
          value: "smartmon.py"
        - name: INTERVAL
          value: "60"
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      securityContext:
        privileged: true

  sidecarVolumeMount:
    - name: collector-textfiles
      mountPath: /var/lib/node_exporter/
      readOnly: false
    - name: collector-tmp
      mountPath: /tmp
      readOnly: false

  sidecarHostVolumeMounts:
    - name: host-dev
      hostPath: /dev
      mountPath: /dev
