# https://github.com/datahub-local/servarr/blob/main/servarr/values.yaml

argoCD: true

global:
  apikey: &apikey "{{ .StateValues.security_github_client_secret | trunc 32 }}"
  storageClassName: &storageClassName "longhorn-no-replica"
  authMethod: External
  ingressHostPattern: "media-SERVICE.{{ .StateValues.ingress_hostname }}"

  resources:
    sonarr: &sonarrResources
      limits:
        cpu: "1"
        memory: "2Gi"

    radarr: &radarrResources
      limits:
        cpu: "1"
        memory: "1Gi"

    jellyfin: &jellyfinResources
      limits:
        cpu: "1"
        memory: "2Gi"

    jellyseerr: &jellyseerrResources
      limits:
        cpu: "1"
        memory: "1Gi"

    qbittorrent: &qbittorrentResources
      limits:
        cpu: "500m"
        memory: "512Mi"

    prowlarr: &prowlarrResources
      limits:
        cpu: "500m"
        memory: "512Mi"

    flaresolverr: &flaresolverrResources
      limits:
        cpu: "1"
        memory: "2Gi"

    exportarr: &exportarrResources
      limits:
        cpu: "250m"
        memory: "256Mi"

  podOptionsArm: &podOptionsArm
    nodeSelector:
      kubernetes.io/arch: arm64

  podOptionsAmd: &podOptionsAmd
    nodeSelector:
      kubernetes.io/arch: amd64

    tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule

metrics:
  enabled: &metricsEnabled true

dash: # Set easy credentials because it is authenticated by reverse proxy.
  username: admin
  password: password
  mail: admin@example.com
  countryCode: "US"
  preferredLanguage: "en"

torrent: # Set easy credentials because it is authenticated by reverse proxy.
  username: admin
  password: password

volumes:
  storageClass: *storageClassName
  downloads:
    name: &downloads-volume downloads-volume
    size: 10Gi
  media:
    name: &media-volume media-volume
    size: 50Gi
  torrentConfig:
    name: &torrentConfig torrent-config
    size: 250Mi

sonarr:
  crd:
    verify:
      enabled: false
  metrics:
    main:
      enabled: *metricsEnabled
  workload:
    main:
      podSpec:
        containers:
          main:
            resources: *sonarrResources
          exportarr:
            resources: *exportarrResources
  ingress:
    sonarr-ing:
      annotations:
        #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | nindent 8 }}{{ end }}

        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "Sonarr"
        gethomepage.dev/pod-selector: "app.kubernetes.io/name=sonarr"
        gethomepage.dev/description: "Smart PVR for newsgroup and bittorrent users"
        gethomepage.dev/group: "Media"
        gethomepage.dev/icon: "sh-sonarr"
      ingressClassName: "nginx"
  persistence:
    config:
      storageClass: *storageClassName
    media:
      existingClaim: *media-volume
    downloads:
      existingClaim: *downloads-volume

  podOptions: *podOptionsArm

radarr:
  crd:
    verify:
      enabled: false
  metrics:
    main:
      enabled: *metricsEnabled
  workload:
    main:
      podSpec:
        containers:
          main:
            resources: *radarrResources
          exportarr:
            resources: *exportarrResources
  ingress:
    radarr-ing:
      annotations:
        #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | nindent 8 }}{{ end }}

        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "Radarr"
        gethomepage.dev/pod-selector: "app.kubernetes.io/name=radarr"
        gethomepage.dev/description: "Movie organizer/manager for usenet and torrent users"
        gethomepage.dev/group: "Media"
        gethomepage.dev/icon: "sh-radarr"
      ingressClassName: "nginx"
  persistence:
    config:
      storageClass: *storageClassName
    media:
      existingClaim: *media-volume
    downloads:
      existingClaim: *downloads-volume

  podOptions: *podOptionsArm

jellyfin:
  crd:
    verify:
      enabled: false
  workload:
    main:
      podSpec:
        containers:
          main:
            resources: *jellyfinResources
  ingress:
    jellyfin-ing:
      annotations:
        #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | nindent 8 }}{{ end }}

        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "jellyfin"
        gethomepage.dev/pod-selector: "app.kubernetes.io/name=jellyfin"
        gethomepage.dev/description: "The Free Software Media System - Server Backend & API"
        gethomepage.dev/group: "Media"
        gethomepage.dev/icon: "sh-jellyfin"
      ingressClassName: "nginx"
  persistence:
    config:
      storageClass: *storageClassName
    media:
      existingClaim: *media-volume

  podOptions: *podOptionsAmd

jellyseerr:
  crd:
    verify:
      enabled: false
  workload:
    main:
      podSpec:
        containers:
          main:
            resources: *jellyseerrResources
  ingress:
    jellyseerr-ing:
      annotations:
        #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | nindent 8 }}{{ end }}

        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "jellyseerr"
        gethomepage.dev/pod-selector: "app.kubernetes.io/name=jellyseerr"
        gethomepage.dev/description: "Open-source media request and discovery manager for Jellyfin, Plex, and Emby"
        gethomepage.dev/group: "Media"
        gethomepage.dev/icon: "sh-jellyseerr"
      ingressClassName: "nginx"
  persistence:
    config:
      storageClass: *storageClassName
    media:
      existingClaim: *media-volume

  podOptions: *podOptionsArm

qbittorrent:
  crd:
    verify:
      enabled: false
  workload:
    main:
      podSpec:
        containers:
          main:
            resources: *qbittorrentResources
  ingress:
    qbittorrent-ing:
      annotations:
        #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | nindent 8 }}{{ end }}

        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "qbittorrent"
        gethomepage.dev/pod-selector: "app.kubernetes.io/name=qbittorrent"
        gethomepage.dev/description: "BitTorrent client"
        gethomepage.dev/group: "Media"
        gethomepage.dev/icon: "sh-qbittorrent"
      ingressClassName: "nginx"
  persistence:
    config:
      existingClaim: *torrentConfig
    downloads:
      existingClaim: *downloads-volume

  podOptions: *podOptionsArm

prowlarr:
  crd:
    verify:
      enabled: false
  metrics:
    main:
      enabled: *metricsEnabled
  workload:
    main:
      podSpec:
        containers:
          main:
            resources: *prowlarrResources
          exportarr:
            resources: *exportarrResources
  ingress:
    prowlarr-ing:
      annotations:
        #{{- if .Values.security_enabled }}{{ .Values.security_oauth2_annotations | toYaml | nindent 8 }}{{ end }}

        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "prowlarr"
        gethomepage.dev/pod-selector: "app.kubernetes.io/name=prowlarr"
        gethomepage.dev/description: "Prowlarr is an indexer manager/proxy built on the popular *arrs"
        gethomepage.dev/group: "Media"
        gethomepage.dev/icon: "sh-prowlarr"
      ingressClassName: "nginx"
  persistence:
    config:
      storageClass: *storageClassName

  podOptions: *podOptionsArm

flaresolverr:
  crd:
    verify:
      enabled: false
  workload:
    main:
      podSpec:
        containers:
          main:
            resources: *flaresolverrResources

  podOptions: *podOptionsAmd
